

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>TransformParser &mdash; TEMpy 1.0.0 documentation</title>
    
    <link rel="stylesheet" href="../_static/default.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../',
        VERSION:     '1.0.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="top" title="TEMpy 1.0.0 documentation" href="../index.html" />
    <link rel="up" title="Module code" href="index.html" /> 
  </head>
  <body>

<div style="background-color: white; text-align: left; padding: 10px 10px 15px 15px">
<a href="../index.html"><img src="../_static/test6.png" border="0" alt="TEMPy"/></a>
</div>

    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../py-modindex.html" title="Python Module Index"
             >modules</a></li>
        <li><a href="../index.html">home</a>|&nbsp;</li>
        <li><a href="../search.html">search</a>|&nbsp;</li>

          <li><a href="index.html" accesskey="U">Module code</a> &raquo;</li> 
      </ul>
    </div>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            
  <h1>Source code for TransformParser</h1><div class="highlight"><pre>
<span class="c">#===============================================================================</span>
<span class="c"># 	This file is part of TEMPy.</span>
<span class="c"># 	</span>
<span class="c"># 	TEMPy is a free software designed to help the user in the manipulation </span>
<span class="c"># 	and analyses of macromolecular assemblies using 3D electron microscopy maps. </span>
<span class="c"># 	</span>
<span class="c">#     Copyright (C) 2013 Irene Farabella, Daven Vasishtan, Arun Prasad Pandurangan, </span>
<span class="c">#     				   Agnel-Praveen Joseph, Harpal Sahota and Maya Topf.</span>
<span class="c"># </span>
<span class="c"># </span>
<span class="c">#     TEMPy is free software: you can redistribute it and/or modify</span>
<span class="c">#     it under the terms of the GNU General Public License as published by</span>
<span class="c">#     the Free Software Foundation, either version 3 of the License, or</span>
<span class="c">#     (at your option) any later version.</span>
<span class="c"># </span>
<span class="c">#     TEMPy is distributed in the hope that it will be useful,</span>
<span class="c">#     but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="c">#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<span class="c">#     GNU General Public License for more details.</span>
<span class="c"># </span>
<span class="c">#     You should have received a copy of the GNU General Public License</span>
<span class="c">#     along with TEMPy.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
<span class="c">#     </span>
<span class="c">#     Please cite your use of TEMPy in published work:</span>
<span class="c"># </span>
<span class="c">#     I. Farabella ,D.Vasishtan, A. P. Pandurangan, H. Sahota and M. Topf .</span>
<span class="c">#     TEMPy: Tool for Scoring and Assessment into 3D EM Maps using Python </span>
<span class="c">#     XXXXX</span>
<span class="c">#===============================================================================</span>



<span class="kn">from</span> <span class="nn">numpy</span> <span class="kn">import</span> <span class="n">load</span><span class="p">,</span> <span class="n">save</span><span class="p">,</span><span class="n">savez</span>
<div class="viewcode-block" id="TransformParser"><a class="viewcode-back" href="../TransformParser.html#TransformParser.TransformParser">[docs]</a><span class="k">class</span> <span class="nc">TransformParser</span><span class="p">:</span>
	<span class="sd">&quot;&quot;&quot;A class to read and save transformation matrices &quot;&quot;&quot;</span>
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
		<span class="k">pass</span>

<div class="viewcode-block" id="TransformParser.load_matrix"><a class="viewcode-back" href="../TransformParser.html#TransformParser.TransformParser.load_matrix">[docs]</a>	<span class="k">def</span> <span class="nf">load_matrix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">matrixname</span><span class="p">,</span><span class="n">mmap_mode</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
		<span class="sd">&quot;&quot;&quot;</span>
<span class="sd">		Load an array(s) from .npy, .npz </span>
<span class="sd">		</span>
<span class="sd">		Arguments:</span>
<span class="sd">			</span>
<span class="sd">			*matrixname*:</span>
<span class="sd">				.npy  matrix</span>
<span class="sd">				If the filename extension is .gz, the file is first decompressed</span>
<span class="sd">				(see numpy.load for more information)</span>
<span class="sd">			</span>
<span class="sd">			*mmap_mode*:</span>
<span class="sd">				default None (memory-map the file)</span>
<span class="sd">				It can be set with different mode: </span>
<span class="sd">				&#39;r&#39;,&#39;r+&#39;,&#39;w+&#39;,&#39;c&#39; accordingly with numpy.load (see numpy.memmap for a detailed description of the modes)</span>
<span class="sd">				The file is opened in this mode:</span>
<span class="sd">					&#39;r&#39;	Open existing file for reading only.</span>
<span class="sd">					&#39;r+&#39;	Open existing file for reading and writing.</span>
<span class="sd">					&#39;w+&#39;	Create or overwrite existing file for reading and writing.</span>
<span class="sd">					&#39;c&#39;	Copy-on-write: assignments affect data in memory, but changes are not saved to disk. The file on disk is read-only.</span>
<span class="sd">				A memory-mapped array is kept on disk. However, it can be accessed and sliced like any ndarray. </span>
<span class="sd">				Memory mapping is especially useful for accessing small fragments of large files without reading the entire file into memory.</span>
<span class="sd">				</span>
<span class="sd">		&quot;&quot;&quot;</span>
		<span class="k">return</span> <span class="n">load</span><span class="p">(</span><span class="n">matrixname</span><span class="p">,</span><span class="n">mmap_mode</span><span class="p">)</span>
</div>
<div class="viewcode-block" id="TransformParser.save_npy_matrix"><a class="viewcode-back" href="../TransformParser.html#TransformParser.TransformParser.save_npy_matrix">[docs]</a>	<span class="k">def</span> <span class="nf">save_npy_matrix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="nb">file</span><span class="p">,</span><span class="n">arr</span><span class="p">):</span>
		<span class="sd">&quot;&quot;&quot;</span>
<span class="sd">		Save an array to a binary file in NumPy .npy format.</span>
<span class="sd">		</span>
<span class="sd">		Arguments:</span>
<span class="sd">			*file* </span>
<span class="sd">				File or filename to which the data is saved. If file is a file-object, then the filename is unchanged. If file is a string, a .npy extension will be appended to the file name if it does not already have one.</span>
<span class="sd">			*arr*</span>
<span class="sd">				array_like. Array data to be saved.</span>
<span class="sd">		</span>
<span class="sd">		&quot;&quot;&quot;</span>
		<span class="k">return</span> <span class="n">save</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="n">arr</span><span class="p">)</span>
	</div>
<div class="viewcode-block" id="TransformParser.save_npz_matrix"><a class="viewcode-back" href="../TransformParser.html#TransformParser.TransformParser.save_npz_matrix">[docs]</a>	<span class="k">def</span> <span class="nf">save_npz_matrix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="nb">file</span><span class="p">):</span>
		<span class="sd">&quot;&quot;&quot;</span>
<span class="sd">		Save several arrays into a single file in uncompressed .npz format. (See numpy.savez for more information)</span>
<span class="sd">		&quot;&quot;&quot;</span>
		<span class="k">return</span> <span class="n">savez</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
	</div></div>
</pre></div>

          </div>
        </div>
      </div>
      <div class="sphinxsidebar">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">1. Installation on Linux &amp; Mac OSX</a></li>
<li class="toctree-l1"><a class="reference internal" href="../overview.html">2. How to use TEMPy</a></li>
<li class="toctree-l1"><a class="reference internal" href="../StructureParser.html">3. Parser for Structure Instance</a></li>
<li class="toctree-l1"><a class="reference internal" href="../ProtRep_Biopy.html">4. Class to define and manipulate protein structures</a></li>
<li class="toctree-l1"><a class="reference internal" href="../MapParser.html">5. Parser for Density Map Instance</a></li>
<li class="toctree-l1"><a class="reference internal" href="../StructureBlurrer.html">6. Density Map Generation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../EMMap.html">7. Density Map Instance Informations</a></li>
<li class="toctree-l1"><a class="reference internal" href="../RigidBodyParser.html">8. Read Rigid Body Files in Flex-EM format</a></li>
<li class="toctree-l1"><a class="reference internal" href="../TransformParser.html">9. Parser for Transformation Matrices</a></li>
<li class="toctree-l1"><a class="reference internal" href="../EnsembleGeneration.html">10. Generation an Ensemble of Structure Instance</a></li>
<li class="toctree-l1"><a class="reference internal" href="../ScoringFunctions.html">11. Scoring Functions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../Cluster.html">12. Clustering multiple fits in a cryoEM map</a></li>
<li class="toctree-l1"><a class="reference internal" href="../ShowPlot.html">13. Plotting and Output Functions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../Vector.html">14. Core Modules : Vector</a></li>
</ul>

        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../py-modindex.html" title="Python Module Index"
             >modules</a></li>
        <li><a href="../index.html">home</a>|&nbsp;</li>
        <li><a href="../search.html">search</a>|&nbsp;</li>

          <li><a href="index.html" >Module code</a> &raquo;</li> 
      </ul>
    </div>
    <div class="footer">
        &copy; Copyright 2013-2014, Birkbeck College, University of London.
      Last updated on Jun 10, 2014.
      Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.1.2.
    </div>
  </body>
</html>