#!/usr/bin/env python

import argparse
from PEETPRMParser import PEETPRMFile
      
parser = argparse.ArgumentParser(description=('Create models and motive lists for averaging and aligning tetrahedral particles. You first need to run '
                                              'a PEET alignment and get an average of the whole tetrahedron with a known orientation in the box.'))
parser.add_argument('prmfile', help='The name of the PEET parameter file (normally ending in .prm) that corresponds to your alignment run.')
parser.add_argument('diameter', type=float, help='Diameter, in pixels, of the tetrahedron.')
parser.add_argument('iteration', type=int, help='Number value, the iteration to use when getting pentons. 0 refers to the initial input files.')
parser.add_argument('outdir', help='Directory to output new motive lists and model files. Automatically creates directory if it does not exist')
parser.add_argument('--orientation', nargs=4, metavar=('x','y','z','d'), help='The axis-angle rotation (x,y,z, for the axis, d for rotation in degrees) to convert '
                    'a tetrahedron with vertices at [+/-1,0,-1/sqrt(2)] and [0,+/-1,1/sqrt(2)] into the orientation of your particle. Default of (1,0,0,-30) aligns '
                    'one axis with the y-axis', default=(1,0,0,-30), type=float)
parser.add_argument('--no_prm', help='Turn off writing out an accompanying parameter file.', action="store_true")


args = parser.parse_args()

writeprm = not args.no_prm

if args.diameter == 0:
    diameter = 0.0001
else:
    diameter = args.diameter

inp = PEETPRMFile(args.prmfile)
inp.get_tetra(args.iteration, diameter, args.outdir, orient=args.orientation, writeprm=writeprm)

